{"version":3,"file":"utils.js","names":["HttpError","_Error","message","statusCode","body","_this","call","name","Error","captureStackTrace","_unused","_inheritsLoose","_wrapNativeSuper","NetRequest","uri","_proto","prototype","get","_this2","opts","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","query","includes","Net","encodeQuery","open","method","onreadystatechange","DONE","readyState","status","responseText","err","statusText","setRequestHeader","send","post","Object","assign","startsWith","defaultRoute","document","location","protocol","data","urlencodedData","key","encodeURIComponent","decodeQuery","out","questionIndex","indexOf","slice","_i2","_query$split2","split","queryPart","_queryPart$split","value","decodeURIComponent","PSSubscription","observable","listener","_proto2","unsubscribe","index","subscriptions","splice","PSModel","_proto3","subscribe","subscription","push","subscribeAndRun","update","_i4","_this$subscriptions2","PSStreamModel","updates","_proto4","_i6","_this$updates2","_i8","_this$subscriptions4"],"sources":["../src/utils.ts"],"sourcesContent":["/**********************************************************************\r\n * Net\r\n *********************************************************************/\r\n\r\nexport interface PostData {\r\n\t[key: string]: string | number | undefined;\r\n}\r\nexport interface NetRequestOptions {\r\n\tmethod?: 'GET' | 'POST';\r\n\tbody?: string | PostData;\r\n\tquery?: PostData;\r\n}\r\nexport class HttpError extends Error {\r\n\tstatusCode?: number;\r\n\tbody: string;\r\n\tconstructor(message: string, statusCode: number | undefined, body: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'HttpError';\r\n\t\tthis.statusCode = statusCode;\r\n\t\tthis.body = body;\r\n\t\ttry {\r\n\t\t\t(Error as any).captureStackTrace(this, HttpError);\r\n\t\t} catch {}\r\n\t}\r\n}\r\nexport class NetRequest {\r\n\turi: string;\r\n\tconstructor(uri: string) {\r\n\t\tthis.uri = uri;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a basic http/https request to the URI.\r\n\t * Returns the response data.\r\n\t *\r\n\t * Will throw if the response code isn't 200 OK.\r\n\t *\r\n\t * @param opts request opts\r\n\t */\r\n\tget(opts: NetRequestOptions = {}): Promise<string> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\tlet uri = this.uri;\r\n\t\t\tif (opts.query) {\r\n\t\t\t\turi += (uri.includes('?') ? '&' : '?') + Net.encodeQuery(opts.query);\r\n\t\t\t}\r\n\t\t\txhr.open(opts.method || 'GET', uri);\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tconst DONE = 4;\r\n\t\t\t\tif (xhr.readyState === DONE) {\r\n\t\t\t\t\tif (xhr.status === 200) {\r\n\t\t\t\t\t\tresolve(xhr.responseText || '');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst err = new HttpError(xhr.statusText || \"Connection error\", xhr.status, xhr.responseText);\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif (opts.body) {\r\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\t\t\t\txhr.send(Net.encodeQuery(opts.body));\r\n\t\t\t} else {\r\n\t\t\t\txhr.send();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t * @param body POST body\r\n\t */\r\n\tpost(opts: Omit<NetRequestOptions, 'body'>, body: PostData | string): Promise<string>;\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t */\r\n\tpost(opts?: NetRequestOptions): Promise<string>;\r\n\tpost(opts: NetRequestOptions = {}, body?: PostData | string) {\r\n\t\tif (!body) body = opts.body;\r\n\t\treturn this.get({\r\n\t\t\t...opts,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport function Net(uri: string) {\r\n\tif (uri.startsWith('/') && !uri.startsWith('//') && Net.defaultRoute) uri = Net.defaultRoute + uri;\r\n\tif (uri.startsWith('//') && document.location.protocol === 'file:') uri = 'https:' + uri;\r\n\treturn new NetRequest(uri);\r\n}\r\n\r\n/** Prepends URLs starting with `/` with this string. Used by testclient. */\r\nNet.defaultRoute = '';\r\n\r\nNet.encodeQuery = function (data: string | PostData) {\r\n\tif (typeof data === 'string') return data;\r\n\tlet urlencodedData = '';\r\n\tfor (const key in data) {\r\n\t\tif ((data as any)[key] === undefined) continue;\r\n\t\tif (urlencodedData) urlencodedData += '&';\r\n\t\turlencodedData += encodeURIComponent(key) + '=' + encodeURIComponent((data as any)[key]);\r\n\t}\r\n\treturn urlencodedData;\r\n};\r\nNet.decodeQuery = function (query: string): { [key: string]: string } {\r\n\tlet out: { [key: string]: string } = {};\r\n\tconst questionIndex = query.indexOf('?');\r\n\tif (questionIndex >= 0) query = query.slice(questionIndex + 1);\r\n\tfor (const queryPart of query.split('&')) {\r\n\t\tconst [key, value] = queryPart.split('=');\r\n\t\tout[decodeURIComponent(key)] = decodeURIComponent(value || '');\r\n\t}\r\n\treturn out;\r\n};\r\n\r\n/**********************************************************************\r\n * Models\r\n *********************************************************************/\r\n\r\nexport class PSSubscription {\r\n\tobservable: PSModel | PSStreamModel<any>;\r\n\tlistener: (value?: any) => void;\r\n\tconstructor(observable: PSModel | PSStreamModel<any>, listener: (value?: any) => void) {\r\n\t\tthis.observable = observable;\r\n\t\tthis.listener = listener;\r\n\t}\r\n\tunsubscribe() {\r\n\t\tconst index = this.observable.subscriptions.indexOf(this);\r\n\t\tif (index >= 0) this.observable.subscriptions.splice(index, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * PS Models roughly implement the Observable spec. Not the entire\r\n * spec - just the parts we use. PSModel just notifies subscribers of\r\n * updates - a simple model for React.\r\n */\r\nexport class PSModel {\r\n\tsubscriptions = [] as PSSubscription[];\r\n\tsubscribe(listener: () => void) {\r\n\t\tconst subscription = new PSSubscription(this, listener);\r\n\t\tthis.subscriptions.push(subscription);\r\n\t\treturn subscription;\r\n\t}\r\n\tsubscribeAndRun(listener: () => void) {\r\n\t\tconst subscription = this.subscribe(listener);\r\n\t\tsubscription.listener();\r\n\t\treturn subscription;\r\n\t}\r\n\tupdate() {\r\n\t\tfor (const subscription of this.subscriptions) {\r\n\t\t\tsubscription.listener();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * PS Models roughly implement the Observable spec. PSStreamModel\r\n * streams some data out. This is very not-React, which generally\r\n * expects the DOM to be a pure function of state. Instead PSModels\r\n * which hold state, PSStreamModels give state directly to views,\r\n * so that the model doesn't need to hold a redundant copy of state.\r\n */\r\nexport class PSStreamModel<T = string> {\r\n\tsubscriptions = [] as PSSubscription[];\r\n\tupdates = [] as T[];\r\n\tsubscribe(listener: (value: T) => void) {\r\n\t\t// TypeScript bug\r\n\t\tconst subscription: PSSubscription = new PSSubscription(this, listener);\r\n\t\tthis.subscriptions.push(subscription);\r\n\t\tif (this.updates.length) {\r\n\t\t\tfor (const update of this.updates) {\r\n\t\t\t\tsubscription.listener(update);\r\n\t\t\t}\r\n\t\t\tthis.updates = [];\r\n\t\t}\r\n\t\treturn subscription;\r\n\t}\r\n\tsubscribeAndRun(listener: (value: T) => void) {\r\n\t\tconst subscription = this.subscribe(listener);\r\n\t\tsubscription.listener(null);\r\n\t\treturn subscription;\r\n\t}\r\n\tupdate(value: T) {\r\n\t\tif (!this.subscriptions.length) {\r\n\t\t\t// save updates for later\r\n\t\t\tthis.updates.push(value);\r\n\t\t}\r\n\t\tfor (const subscription of this.subscriptions) {\r\n\t\t\tsubscription.listener(value);\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]}