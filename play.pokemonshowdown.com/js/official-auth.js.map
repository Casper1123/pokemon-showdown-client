{"version":3,"file":"official-auth.js","names":["OfficialAuthError","_Error","operation","_this","statusCode","arguments","length","undefined","call","toString","name","Object","setPrototypeOf","prototype","_inheritsLoose","_wrapNativeSuper","Error","OfficialAuth","_class","apiUrl","clientId","redirectURI","Config","routes","client","_proto","requestUrl","endpoint","console","assert","startsWith","URL","refreshToken","token","localStorage","getItem","tokenExpiry","Number","now","Date","response","fetch","method","headers","body","URLSearchParams","client_id","encodeURIComponent","responseText","text","jsonData","slice","data","JSON","parse","success","status","setItem","expires","authorize","user","_this2","clearTokenStorage","authorizeUrl","searchParams","append","challstr","popup","window","open","checkIfUpdated","_popup$location","closed","location","href","url","decodeURIComponent","get","error","assertion","userid","close","PS","leave","handleAssertion","setTimeout","DOMException","getAssertion","authorized","challenge","revoke","uri","removeItem","tokenExpiry_string","refresh","reauth","e"],"sources":["../src/official-auth.ts"],"sourcesContent":["import { Config, PS, type PSUser, type RoomID } from \"./client-main\";\r\n\r\nexport class OfficialAuthError extends Error {\r\n\tconstructor(operation: string, statusCode: number | null = null) {\r\n\t\tsuper(`Official auth error in operation '${operation}'.` + statusCode !== null ? ` Status code: ${statusCode!.toString()}` : \"\");\r\n\t\tthis.name = 'OfficialAuthError';\r\n\t\tObject.setPrototypeOf(this, OfficialAuthError.prototype);\r\n\t}\r\n}\r\n\r\n/**\r\n * Quick and dirty interface draft; methods to place requests are located here.\r\n * Please check pre and post conditions.\r\n */\r\nexport const OfficialAuth = new class {\r\n\tapiUrl = \"https://play.pokemonshowdown.com/api/oauth/\";\r\n\tclientId = \"7065ebd4d6219ec30a4b\";\r\n\tredirectURI = Config.routes.client;\r\n\r\n\t/**\r\n\t * Returns a new URL object with the given api endpoint.\r\n\t * @param endpoint The endpoint to reach, directly behind oauth.\r\n\t * @pre endpoint is of type string with length >= 0, whose first character may not be /\r\n\t * @post a new URL object containing the API url appended by the given endpoint.\r\n\t */\r\n\trequestUrl(endpoint: string): URL {\r\n\t\tconsole.assert(endpoint.length >= 0, \"No endpoint given\");\r\n\t\tconsole.assert(!endpoint.startsWith(\"/\"), \"Endpoint starts with /\");\r\n\t\treturn new URL(this.apiUrl + endpoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Refreshes the currently stored auth token in cookies.\r\n\t * Returns false if no token was found, or it already expired.\r\n\t * True if operation succeeded.\r\n\t */\r\n\tasync refreshToken(): Promise<boolean> {\r\n\t\tconst token = localStorage.getItem(\"ps-token\");\r\n\t\tif (!token) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst tokenExpiry = Number(localStorage.getItem(\"ps-token-expiry\"));\r\n\t\tif (!tokenExpiry) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst now = Date.now();\r\n\t\tif (tokenExpiry <= now) {\r\n\t\t\treturn false; // Equal because it takes a tiny bit of time to send and process the request. Might not even be large enough a buffer.\r\n\t\t}\r\n\t\tif (now < tokenExpiry - 259200000) {\r\n\t\t\treturn true; // Only refresh if token still lasts for like 3 days or so. Just hope it's not invalidated.\r\n\t\t}\r\n\r\n\t\tconst response = await fetch(this.requestUrl(\"api/refreshtoken\"), {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t\t},\r\n\t\t\tbody: new URLSearchParams({\r\n\t\t\t\tclient_id: encodeURIComponent(this.clientId),\r\n\t\t\t\ttoken: encodeURIComponent(token),\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tconst responseText = await response.text();\r\n\t\t// Remove the ']' CSRF protection prefix\r\n\t\tconst jsonData = responseText.startsWith(']') ? responseText.slice(1) : responseText;\r\n\t\tconst data = JSON.parse(jsonData);\r\n\r\n\t\tif (!data.success) {\r\n\t\t\tthrow new OfficialAuthError(`refreshToken`, data.status);\r\n\t\t}\r\n\r\n\t\tlocalStorage.setItem(\"ps-token\", data.success);\r\n\r\n\t\tconsole.assert(data.expires !== undefined, \"No token expiry given.\");\r\n\t\tconsole.assert(typeof data.expires === \"number\", \"Token expiry is not a number:\" + data.expires);\r\n\r\n\t\tlocalStorage.setItem(\"ps-token-expiry\", data.expires);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Requests authorization from the user by opening a popup to the documentation defined endpoint.\r\n\t * Will log in the user once it's done.\r\n\t * @param user The user to authorize.\r\n\t */\r\n\tauthorize(user: PSUser): void {\r\n\t\tthis.clearTokenStorage();\r\n\r\n\t\tconst authorizeUrl = this.requestUrl(\"authorize\");\r\n\t\tauthorizeUrl.searchParams.append('redirect_uri', encodeURIComponent(this.redirectURI));\r\n\t\tauthorizeUrl.searchParams.append('client_id', encodeURIComponent(this.clientId));\r\n\t\tauthorizeUrl.searchParams.append('challenge', encodeURIComponent(user.challstr));\r\n\r\n\t\tconst popup = window.open(authorizeUrl, undefined, 'popup=1');\r\n\t\tconst checkIfUpdated = () => {\r\n\t\t\ttry {\r\n\t\t\t\tif (popup?.closed) { return null; } // Give up.\r\n\t\t\t\telse if (popup?.location?.href?.startsWith(this.redirectURI)) {\r\n\t\t\t\t\tconst url = new URL(popup.location.href);\r\n\t\t\t\t\tconst token = decodeURIComponent(url.searchParams.get('token') as string);\r\n\t\t\t\t\tif (!token) {\r\n\t\t\t\t\t\tconsole.error('Received no token')\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlocalStorage.setItem('ps-token', token);\r\n\r\n\t\t\t\t\tconst tokenExpiry = decodeURIComponent(url.searchParams.get('expires') as string);\r\n\t\t\t\t\tif (!tokenExpiry) {\r\n\t\t\t\t\t\tconsole.error('Received no token expiry');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// @ts-ignore if an expiry timestamp has been received, it's safe to assume it's a number. If not, make an issue here: https://github.com/smogon/pokemon-showdown-loginserver\r\n\t\t\t\t\tlocalStorage.setItem('ps-token-expiry', Number(tokenExpiry))\r\n\r\n\t\t\t\t\tconst assertion = decodeURIComponent(url.searchParams.get('assertion') as string);\r\n\t\t\t\t\tif (!assertion) {\r\n\t\t\t\t\t\tconsole.error('Received no assertion');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst userid = decodeURIComponent(url.searchParams.get('user') as string);\r\n\t\t\t\t\tif (!userid) {\r\n\t\t\t\t\t\tconsole.error('Received no userid');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlocalStorage.setItem('ps-token-userid', userid);\r\n\r\n\t\t\t\t\tpopup.close();\r\n\t\t\t\t\tPS.leave('login' as RoomID); // Close login popup if it's open.\r\n\t\t\t\t\tuser.handleAssertion(userid, assertion);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetTimeout(checkIfUpdated, 500);\r\n\t\t\t\t}\r\n\t\t\t} catch (DOMException) {\r\n\t\t\t\tsetTimeout(checkIfUpdated, 500);\r\n\t\t\t}\r\n\t\t};\r\n\t\tcheckIfUpdated();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an assertion for the given user if there's a valid token.\r\n\t * Otherwise returns an empty string.\r\n\t */\r\n\tasync getAssertion(user: PSUser): Promise<string | null> {\r\n\t\tif (!await this.authorized()) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst token = localStorage.getItem(\"ps-token\");\r\n\t\tconsole.assert(token !== null, \"Token was null during getAssertion call.\");\r\n\t\t// Due to authorized call we can assume a valid token.\r\n\r\n\t\tconst response = await fetch(this.requestUrl(\"api/getassertion\"), {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t\t},\r\n\t\t\tbody: new URLSearchParams({\r\n\t\t\t\tclient_id: encodeURIComponent(this.clientId),\r\n\t\t\t\tchallenge: encodeURIComponent(user.challstr),\r\n\t\t\t\ttoken: encodeURIComponent(token as string), // Casting because token === null is excluded by Authorized.\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tconst responseText = await response.text();\r\n\t\t// Remove the ']' CSRF protection prefix\r\n\t\tconst jsonData = responseText.startsWith(']') ? responseText.slice(1) : responseText;\r\n\t\tconst data = JSON.parse(jsonData);\r\n\t\t// oauth/api/getassertion: { success: false } | string\r\n\t\tif (typeof data !== \"string\") {\r\n\t\t\tthrow new OfficialAuthError(`getAssertion`, data.status);\r\n\t\t}\r\n\t\treturn data; // This is our assertion!\r\n\t}\r\n\r\n\tasync revoke() {\r\n\t\t// oauth/api/revoke: { success: boolean }\r\n\t\t// We can ignore the token access check, because it should revoke all things for this client_id anyways.\r\n\t\tconst response = await fetch(this.requestUrl(\"api/revoke\"), {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t\t},\r\n\t\t\tbody: new URLSearchParams({\r\n\t\t\t\turi: encodeURIComponent(this.redirectURI)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tconst responseText = await response.text();\r\n\t\t// Remove the ']' CSRF protection prefix\r\n\t\tconst jsonData = responseText.startsWith(']') ? responseText.slice(1) : responseText;\r\n\t\tconst data = JSON.parse(jsonData);\r\n\t\tif (!data.success) {\r\n\t\t\tthrow new OfficialAuthError(\"revoke\", response.status);\r\n\t\t}\r\n\r\n\t\tthis.clearTokenStorage();\r\n\t}\r\n\r\n\tclearTokenStorage() {\r\n\t\tlocalStorage.removeItem(\"ps-token\");\r\n\t\tlocalStorage.removeItem(\"ps-token-expiry\");\r\n\t\tlocalStorage.setItem(\"ps-token-userid\", \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * True if a valid token is in storage, false if the user must re-authorize due to lack of valid token credentials.\r\n\t */\r\n\tasync authorized(): Promise<boolean> {\r\n\t\tconst token = localStorage.getItem(\"ps-token\");\r\n\t\tconst tokenExpiry_string = localStorage.getItem(\"ps-token-expiry\");\r\n\t\tlet refresh = false;\r\n\t\tlet reauth = false;\r\n\t\tif (!token) {\r\n\t\t\treauth = true;\r\n\t\t} else if (!tokenExpiry_string) {\r\n\t\t\trefresh = true;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst tokenExpiry = Number(tokenExpiry_string);\r\n\t\t\tif (tokenExpiry <= Date.now()) {\r\n\t\t\t\trefresh = true;\r\n\t\t\t}\r\n\t\t} catch (e) { reauth = true; } // If it fails, well be damned we should probably just try from scratch.\r\n\r\n\t\tif (refresh && !reauth) { // Skip if reauth because it's already been determined to not be a good idea.\r\n\t\t\tconst success = await this.refreshToken();\r\n\t\t\tif (!success) {\r\n\t\t\t\treauth = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (reauth) {\r\n\t\t\tthis.clearTokenStorage()\r\n\t\t\treturn false; // Returning empty. Just display the login error. It's not my problem (for now)\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]}